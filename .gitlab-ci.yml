# This file is a template, and might need editing before it works on your project.
# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/#stages
#
# You can copy and paste this template into a new `.gitlab-ci.yml` file.
# You should not add this template to an existing `.gitlab-ci.yml` file by using the `include:` keyword.
#
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/development/cicd/templates/
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml

image:
  name: gitlab-registry.cern.ch/sft/docker/alma9-core:latest
  entrypoint: ["/bin/bash", "-c"]

variables:
  GIT_CLEAN_FLAGS: "-fdx !install"

before_script:
  - echo "Starting before-script"
  - SIM_OUTPUT_DIR=${CI_PROJECT_DIR}/sim_output
  - OUTPUT_DIR=${CI_PROJECT_DIR}/output
  - NEVENTS=20
  - SETUP_SCRIPT=${CI_PROJECT_DIR}/install/bin/thisDualTestBeam.sh
  - pwd
  - ls -lR
  - source /cvmfs/sft.cern.ch/lcg/views/LCG_107/x86_64-el9-gcc14-opt/setup.sh
  - if [ -f "$SETUP_SCRIPT" ]; then source ${SETUP_SCRIPT}; fi
  - echo "Finishing before-script"

stages:          # List of stages for jobs, and their order of execution
  - build
  - simulation
  - analysis
  - deploy

build-job:       # This job runs in the build stage, which runs first.
  stage: build
  artifacts:
    paths:
      - install/
  tags:
    - cvmfs  # Use a runner with CVMFS support
  script:
    - echo "Compiling the code..."
    - mkdir build
    - mkdir install
    - cd build
    - cmake -DDD4HEP_USE_GEANT4=ON -DBoost_NO_BOOST_CMAKE=ON -DDD4HEP_USE_LCIO=ON -DROOT_DIR=$ROOTSYS -D CMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=../install -D DD4HEP_USE_EDM4HEP=ON ..
    - make -j4
    - make install
    - echo "Compile complete."

simulation-job:   # This job runs in the test stage.
  stage: simulation    # It only starts when the job in the build stage completes successfully.
  tags:
    - cvmfs  # Use a runner with CVMFS support
  dependencies:
    - build-job # Inherit artifacts from build-job
  artifacts:
    paths:
      - sim_output/
  parallel:
    matrix:
    - CI_JOB_NAME: Conly_20GeV_e-
      GEOM: Conly
      PAR: e-
    - CI_JOB_NAME: Conly_20GeV_pi-
      GEOM: Conly
      PAR: pi-
    - CI_JOB_NAME: BigEcal2_20GeV_e-
      GEOM: BigEcal2
      PAR: e-
    - CI_JOB_NAME: BigEcal2_20GeV_pi-
      GEOM: BigEcal2
      PAR: pi-
    - CI_JOB_NAME: DualTestBeam_20GeV_e-
      GEOM: DualTestBeam
      PAR: e-
    - CI_JOB_NAME: DualTestBeam_20GeV_pi-
      GEOM: DualTestBeam
      PAR: pi-
    - CI_JOB_NAME: FSCEPonly_20GeV_e-
      GEOM: FSCEPonly
      PAR: e-
    - CI_JOB_NAME: FSCEPonly_20GeV_pi-
      GEOM: FSCEPonly
      PAR: pi-
  script:
    - echo "Running test."
    - printenv
    - echo ${CI_JOB_NAME} ${GEOM} ${PAR}
    - mkdir -p ${SIM_OUTPUT_DIR}
    - cd compact
    - ddsim --compactFile=DR${GEOM}.xml --runType=batch -G --steeringFile SCEPCALsteering.py --outputFile=${SIM_OUTPUT_DIR}/out_${CI_JOB_NAME}.root --part.userParticleHandler='' -G --gun.position="0.,0.,-1*cm" --gun.direction "0. 0.05 0.99875" --gun.energy "20*GeV" --gun.particle=${PAR} -N ${NEVENTS}
    - echo "Test ends."

analysis-job:      # This job runs in the deploy stage.
  stage: analysis  # It only runs when *both* jobs in the test stage complete successfully.
  tags:
    - cvmfs
  environment: production
  dependencies:
    - build-job # Inherit artifacts from build-job
    - simulation-job
  artifacts:
    paths:
    - output
  parallel:
    matrix:
    - CI_JOB_NAME: Conly
    - CI_JOB_NAME: BigEcal2
    - CI_JOB_NAME: DualTestBeam
    - CI_JOB_NAME: FSCEPonly
  script:
    - echo "Deploying application..."
    - echo "${CI_JOB_NAME}"
    - mkdir -p ${OUTPUT_DIR}/${CI_JOB_NAME}
    - cd ${OUTPUT_DIR}/${CI_JOB_NAME}
    - if [ "$CI_JOB_NAME" == "Conly" ];        then root.exe -b -q '../../compact/Resolution.C+('${NEVENTS}',"'${SIM_OUTPUT_DIR}'/out_Conly_20GeV_e-.root",       "'${SIM_OUTPUT_DIR}'/out_Conly_20GeV_pi-.root",       "'${SIM_OUTPUT_DIR}'/out_Conly_20GeV_e-.root",    "'${SIM_OUTPUT_DIR}'/out_Conly_20GeV_pi-.root",    20.,1,0,1,1,0,0,0,3,"hist_Conly_20GeV.gendet3.root",       "DRCNoSegment","DRFNoSegment",1,0,0,1)'; fi
    - if [ "$CI_JOB_NAME" == "BigEcal2" ];     then root.exe -b -q '../../compact/Resolution.C+('${NEVENTS}',"'${SIM_OUTPUT_DIR}'/out_BigEcal2_20GeV_e-.root",    "'${SIM_OUTPUT_DIR}'/out_BigEcal2_20GeV_pi-.root",    "'${SIM_OUTPUT_DIR}'/out_BigEcal2_20GeV_e-.root", "'${SIM_OUTPUT_DIR}'/out_BigEcal2_20GeV_pi-.root", 20.,1,0,1,1,0,0,0,3,"hist_BigEcal2_20GeV.gendet3.root",    "DRCNoSegment","DRFNoSegment",1,0,1,1)'; fi
    - if [ "$CI_JOB_NAME" == "DualTestBeam" ]; then root.exe -b -q '../../compact/Resolution.C+('${NEVENTS}',"'${SIM_OUTPUT_DIR}'/out_DualTestBeam_20GeV_e-.root","'${SIM_OUTPUT_DIR}'/out_DualTestBeam_20GeV_pi-.root","'${SIM_OUTPUT_DIR}'/out_FSCEPonly_20GeV_e-.root","'${SIM_OUTPUT_DIR}'/out_FSCEPonly_20GeV_pi-.root",20.,1,1,0,1,0,0,0,3,"hist_DualTestBeam_20GeV.gendet3.root","DRCNoSegment","DRFNoSegment",1,0,1,1)'; fi
    - if [ "$CI_JOB_NAME" == "FSCEPonly" ];    then root.exe -b -q '../../compact/Resolution.C+('${NEVENTS}',"'${SIM_OUTPUT_DIR}'/out_FSCEPonly_20GeV_e-.root",   "'${SIM_OUTPUT_DIR}'/out_FSCEPonly_20GeV_pi-.root",   "'${SIM_OUTPUT_DIR}'/out_FSCEPonly_20GeV_e-.root","'${SIM_OUTPUT_DIR}'/out_FSCEPonly_20GeV_pi-.root",20.,0,1,0,1,0,0,0,3,"hist_FSCEPonly_20GeV.gendet3.root",   "DRCNoSegment","DRFNoSegment",1,0,1,1)'; fi
    - echo "Application successfully deployed."

deploy-job:      # This job runs in the deploy stage.
  stage: deploy  # It only runs when *both* jobs in the test stage complete successfully.
  tags:
    - cvmfs
  environment: production
  dependencies:
    - analysis-job
  artifacts:
    paths:
    - output
  script:
    - echo "Deploying application..."
    - echo "Application successfully deployed."
